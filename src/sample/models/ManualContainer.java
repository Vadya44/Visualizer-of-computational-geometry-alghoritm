package sample.models;

/**
 * Синглтон - хранитель спрвки
 */
public class ManualContainer {
    /**
     * Инстанс класса
     */
    private static final ManualContainer instance = new ManualContainer();
    /**
     * Содержимое справки
     */
    private StringBuffer text;

    /**
     * Функция, инициализирующая справку
     */
    private ManualContainer() {
        text = new StringBuffer();
        text.append("Справка по использованию: \n\n" +
                    "\tДанная программа предназначена для визуализации алгоритма поиска кратчайшего расстояние между двумя точками" +
                    " с полигональными препятствиями. \n\n" +
                    "\tГлавный экран позволяет выбрать начальные и конечные точки, полигоны задаются" +
                    " последовательным проведением ребер." +
                    "Для корректной работы полигоны(многоугольники) обязаны быть замкнутыми.\n" +
                "\tПрограмма позволяет тестировать алгоритм, загружая координаты полигонов, начальной и конечной точек" +
                " из текстового файла. Загружаемый файл должен иметь формат .txt, входные данные обязаны иметь следующий формат:\n" +
                " 1. Для задания полигонального препятствия формат строки:\n" +
                "\t\t P:x;y;x;y;x;y...;x;y, где x и y целочисленные значения очередной точки полигона.\n" +
                " 2. Начальные и конечные точки задаются следующими соответствующими форматами:\n" +
                "S:x;y - начальная и E:x;y - конечная.\n" +
                " 3. Каждая строка обязана начинаться с одного из трех символов 'P', 'S', и 'E', а так же удовлетворять условиям 1 и 2.");
    }

    /**
     * Функция, возвращающая текст справки
     */
    public static String getText()
    {
        return instance.text.toString();
    }
}

